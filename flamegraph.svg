<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="3662481171"><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,843,685 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0776%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2843685"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,843,685 samples, 0.08%)</title><rect x="0.0000%" y="597" width="0.0776%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2843685"/><text x="0.2500%" y="607.50"></text></g><g><title>rand::rng::Rng::gen_range (6,166,173 samples, 0.17%)</title><rect x="0.0776%" y="613" width="0.1684%" height="15" fill="rgb(221,193,54)" fg:x="2843685" fg:w="6166173"/><text x="0.3276%" y="623.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::iter_halfedge_2::IterHalfEdge2::opposite (20,188,967 samples, 0.55%)</title><rect x="0.2460%" y="613" width="0.5512%" height="15" fill="rgb(248,212,6)" fg:x="9009858" fg:w="20188967"/><text x="0.4960%" y="623.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::get_halfedge_from_index (26,827,664 samples, 0.73%)</title><rect x="0.7972%" y="613" width="0.7325%" height="15" fill="rgb(208,68,35)" fg:x="29198825" fg:w="26827664"/><text x="1.0472%" y="623.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::halfedge_opposite_index (9,707,351 samples, 0.27%)</title><rect x="1.5297%" y="613" width="0.2650%" height="15" fill="rgb(232,128,0)" fg:x="56026489" fg:w="9707351"/><text x="1.7797%" y="623.50"></text></g><g><title>[[heap]] (68,346,823 samples, 1.87%)</title><rect x="0.0000%" y="629" width="1.8661%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="68346823"/><text x="0.2500%" y="639.50">[..</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::insert_node_within_triangle (2,612,983 samples, 0.07%)</title><rect x="1.7948%" y="613" width="0.0713%" height="15" fill="rgb(228,23,34)" fg:x="65733840" fg:w="2612983"/><text x="2.0448%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2,850,975 samples, 0.08%)</title><rect x="1.8661%" y="613" width="0.0778%" height="15" fill="rgb(218,30,26)" fg:x="68346823" fg:w="2850975"/><text x="2.1161%" y="623.50"></text></g><g><title>computation_time_2::generate_random_simplicial_2 (7,602,047 samples, 0.21%)</title><rect x="1.9440%" y="597" width="0.2076%" height="15" fill="rgb(220,122,19)" fg:x="71197798" fg:w="7602047"/><text x="2.1940%" y="607.50"></text></g><g><title>[[stack]] (83,528,359 samples, 2.28%)</title><rect x="1.8661%" y="629" width="2.2806%" height="15" fill="rgb(250,228,42)" fg:x="68346823" fg:w="83528359"/><text x="2.1161%" y="639.50">[..</text></g><g><title>computation_time_2::main (80,677,384 samples, 2.20%)</title><rect x="1.9440%" y="613" width="2.2028%" height="15" fill="rgb(240,193,28)" fg:x="71197798" fg:w="80677384"/><text x="2.1940%" y="623.50">c..</text></g><g><title>computation_time_2::test (73,075,337 samples, 2.00%)</title><rect x="2.1515%" y="597" width="1.9952%" height="15" fill="rgb(216,20,37)" fg:x="78799845" fg:w="73075337"/><text x="2.4015%" y="607.50">c..</text></g><g><title>_int_free (6,850,940 samples, 0.19%)</title><rect x="5.2675%" y="613" width="0.1871%" height="15" fill="rgb(206,188,39)" fg:x="192921910" fg:w="6850940"/><text x="5.5175%" y="623.50"></text></g><g><title>_int_malloc (11,924,575 samples, 0.33%)</title><rect x="5.4546%" y="613" width="0.3256%" height="15" fill="rgb(217,207,13)" fg:x="199772850" fg:w="11924575"/><text x="5.7046%" y="623.50"></text></g><g><title>_int_realloc (7,560,354 samples, 0.21%)</title><rect x="5.7802%" y="613" width="0.2064%" height="15" fill="rgb(231,73,38)" fg:x="211697425" fg:w="7560354"/><text x="6.0302%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,006,502 samples, 0.22%)</title><rect x="5.9866%" y="613" width="0.2186%" height="15" fill="rgb(225,20,46)" fg:x="219257779" fg:w="8006502"/><text x="6.2366%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (4,284,726 samples, 0.12%)</title><rect x="6.2052%" y="613" width="0.1170%" height="15" fill="rgb(210,31,41)" fg:x="227264281" fg:w="4284726"/><text x="6.4552%" y="623.50"></text></g><g><title>rand::rng::Rng::gen_range (3,860,062 samples, 0.11%)</title><rect x="6.3222%" y="613" width="0.1054%" height="15" fill="rgb(221,200,47)" fg:x="231549007" fg:w="3860062"/><text x="6.5722%" y="623.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (3,862,709 samples, 0.11%)</title><rect x="6.4276%" y="613" width="0.1055%" height="15" fill="rgb(226,26,5)" fg:x="235409069" fg:w="3862709"/><text x="6.6776%" y="623.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::insert_node_within_triangle (10,029,223 samples, 0.27%)</title><rect x="6.5331%" y="613" width="0.2738%" height="15" fill="rgb(249,33,26)" fg:x="239271778" fg:w="10029223"/><text x="6.7831%" y="623.50"></text></g><g><title>[unknown] (111,271,364 samples, 3.04%)</title><rect x="4.1468%" y="629" width="3.0381%" height="15" fill="rgb(235,183,28)" fg:x="151875182" fg:w="111271364"/><text x="4.3968%" y="639.50">[un..</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::set_triangle (13,845,545 samples, 0.38%)</title><rect x="6.8069%" y="613" width="0.3780%" height="15" fill="rgb(221,5,38)" fg:x="249301001" fg:w="13845545"/><text x="7.0569%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,028,964 samples, 0.08%)</title><rect x="7.1022%" y="597" width="0.0827%" height="15" fill="rgb(247,18,42)" fg:x="260117582" fg:w="3028964"/><text x="7.3522%" y="607.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (3,921,160 samples, 0.11%)</title><rect x="7.1849%" y="629" width="0.1071%" height="15" fill="rgb(241,131,45)" fg:x="263146546" fg:w="3921160"/><text x="7.4349%" y="639.50"></text></g><g><title>_int_free (3,921,160 samples, 0.11%)</title><rect x="7.1849%" y="613" width="0.1071%" height="15" fill="rgb(249,31,29)" fg:x="263146546" fg:w="3921160"/><text x="7.4349%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,698,258 samples, 0.10%)</title><rect x="7.2920%" y="357" width="0.1010%" height="15" fill="rgb(225,111,53)" fg:x="267067936" fg:w="3698258"/><text x="7.5420%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,018,990 samples, 0.08%)</title><rect x="7.3930%" y="357" width="0.0824%" height="15" fill="rgb(238,160,17)" fg:x="270766194" fg:w="3018990"/><text x="7.6430%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,018,990 samples, 0.08%)</title><rect x="7.3930%" y="341" width="0.0824%" height="15" fill="rgb(214,148,48)" fg:x="270766194" fg:w="3018990"/><text x="7.6430%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::leading_zeros (3,972,599 samples, 0.11%)</title><rect x="7.7776%" y="293" width="0.1085%" height="15" fill="rgb(232,36,49)" fg:x="284853750" fg:w="3972599"/><text x="8.0276%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2,948,316 samples, 0.08%)</title><rect x="7.8861%" y="293" width="0.0805%" height="15" fill="rgb(209,103,24)" fg:x="288826349" fg:w="2948316"/><text x="8.1361%" y="303.50"></text></g><g><title>rand_chacha::guts::diagonalize (3,638,757 samples, 0.10%)</title><rect x="8.3326%" y="101" width="0.0994%" height="15" fill="rgb(229,88,8)" fg:x="305180785" fg:w="3638757"/><text x="8.5826%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3,638,757 samples, 0.10%)</title><rect x="8.3326%" y="85" width="0.0994%" height="15" fill="rgb(213,181,19)" fg:x="305180785" fg:w="3638757"/><text x="8.5826%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3,638,757 samples, 0.10%)</title><rect x="8.3326%" y="69" width="0.0994%" height="15" fill="rgb(254,191,54)" fg:x="305180785" fg:w="3638757"/><text x="8.5826%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (3,638,757 samples, 0.10%)</title><rect x="8.3326%" y="53" width="0.0994%" height="15" fill="rgb(241,83,37)" fg:x="305180785" fg:w="3638757"/><text x="8.5826%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (3,892,540 samples, 0.11%)</title><rect x="8.4320%" y="85" width="0.1063%" height="15" fill="rgb(233,36,39)" fg:x="308819542" fg:w="3892540"/><text x="8.6820%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (3,892,540 samples, 0.11%)</title><rect x="8.4320%" y="69" width="0.1063%" height="15" fill="rgb(226,3,54)" fg:x="308819542" fg:w="3892540"/><text x="8.6820%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (3,892,540 samples, 0.11%)</title><rect x="8.4320%" y="53" width="0.1063%" height="15" fill="rgb(245,192,40)" fg:x="308819542" fg:w="3892540"/><text x="8.6820%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (3,892,540 samples, 0.11%)</title><rect x="8.4320%" y="37" width="0.1063%" height="15" fill="rgb(238,167,29)" fg:x="308819542" fg:w="3892540"/><text x="8.6820%" y="47.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (3,996,285 samples, 0.11%)</title><rect x="8.5383%" y="85" width="0.1091%" height="15" fill="rgb(232,182,51)" fg:x="312712082" fg:w="3996285"/><text x="8.7883%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (3,996,285 samples, 0.11%)</title><rect x="8.5383%" y="69" width="0.1091%" height="15" fill="rgb(231,60,39)" fg:x="312712082" fg:w="3996285"/><text x="8.7883%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (3,996,285 samples, 0.11%)</title><rect x="8.5383%" y="53" width="0.1091%" height="15" fill="rgb(208,69,12)" fg:x="312712082" fg:w="3996285"/><text x="8.7883%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (3,719,608 samples, 0.10%)</title><rect x="8.6474%" y="85" width="0.1016%" height="15" fill="rgb(235,93,37)" fg:x="316708367" fg:w="3719608"/><text x="8.8974%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (3,719,608 samples, 0.10%)</title><rect x="8.6474%" y="69" width="0.1016%" height="15" fill="rgb(213,116,39)" fg:x="316708367" fg:w="3719608"/><text x="8.8974%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (3,719,608 samples, 0.10%)</title><rect x="8.6474%" y="53" width="0.1016%" height="15" fill="rgb(222,207,29)" fg:x="316708367" fg:w="3719608"/><text x="8.8974%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (3,957,893 samples, 0.11%)</title><rect x="8.7489%" y="85" width="0.1081%" height="15" fill="rgb(206,96,30)" fg:x="320427975" fg:w="3957893"/><text x="8.9989%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (3,957,893 samples, 0.11%)</title><rect x="8.7489%" y="69" width="0.1081%" height="15" fill="rgb(218,138,4)" fg:x="320427975" fg:w="3957893"/><text x="8.9989%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (3,957,893 samples, 0.11%)</title><rect x="8.7489%" y="53" width="0.1081%" height="15" fill="rgb(250,191,14)" fg:x="320427975" fg:w="3957893"/><text x="8.9989%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (6,305,592 samples, 0.17%)</title><rect x="8.8570%" y="85" width="0.1722%" height="15" fill="rgb(239,60,40)" fg:x="324385868" fg:w="6305592"/><text x="9.1070%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (6,305,592 samples, 0.17%)</title><rect x="8.8570%" y="69" width="0.1722%" height="15" fill="rgb(206,27,48)" fg:x="324385868" fg:w="6305592"/><text x="9.1070%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (6,305,592 samples, 0.17%)</title><rect x="8.8570%" y="53" width="0.1722%" height="15" fill="rgb(225,35,8)" fg:x="324385868" fg:w="6305592"/><text x="9.1070%" y="63.50"></text></g><g><title>rand::rng::Rng::gen_range (64,366,180 samples, 1.76%)</title><rect x="7.4754%" y="357" width="1.7574%" height="15" fill="rgb(250,213,24)" fg:x="273785184" fg:w="64366180"/><text x="7.7254%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (60,226,619 samples, 1.64%)</title><rect x="7.5884%" y="341" width="1.6444%" height="15" fill="rgb(247,123,22)" fg:x="277924745" fg:w="60226619"/><text x="7.8384%" y="351.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (60,226,619 samples, 1.64%)</title><rect x="7.5884%" y="325" width="1.6444%" height="15" fill="rgb(231,138,38)" fg:x="277924745" fg:w="60226619"/><text x="7.8384%" y="335.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (60,226,619 samples, 1.64%)</title><rect x="7.5884%" y="309" width="1.6444%" height="15" fill="rgb(231,145,46)" fg:x="277924745" fg:w="60226619"/><text x="7.8384%" y="319.50"></text></g><g><title>rand::rng::Rng::gen (46,376,699 samples, 1.27%)</title><rect x="7.9666%" y="293" width="1.2663%" height="15" fill="rgb(251,118,11)" fg:x="291774665" fg:w="46376699"/><text x="8.2166%" y="303.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (46,376,699 samples, 1.27%)</title><rect x="7.9666%" y="277" width="1.2663%" height="15" fill="rgb(217,147,25)" fg:x="291774665" fg:w="46376699"/><text x="8.2166%" y="287.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (46,376,699 samples, 1.27%)</title><rect x="7.9666%" y="261" width="1.2663%" height="15" fill="rgb(247,81,37)" fg:x="291774665" fg:w="46376699"/><text x="8.2166%" y="271.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (46,376,699 samples, 1.27%)</title><rect x="7.9666%" y="245" width="1.2663%" height="15" fill="rgb(209,12,38)" fg:x="291774665" fg:w="46376699"/><text x="8.2166%" y="255.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (46,376,699 samples, 1.27%)</title><rect x="7.9666%" y="229" width="1.2663%" height="15" fill="rgb(227,1,9)" fg:x="291774665" fg:w="46376699"/><text x="8.2166%" y="239.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (32,970,579 samples, 0.90%)</title><rect x="8.3326%" y="213" width="0.9002%" height="15" fill="rgb(248,47,43)" fg:x="305180785" fg:w="32970579"/><text x="8.5826%" y="223.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (32,970,579 samples, 0.90%)</title><rect x="8.3326%" y="197" width="0.9002%" height="15" fill="rgb(221,10,30)" fg:x="305180785" fg:w="32970579"/><text x="8.5826%" y="207.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (32,970,579 samples, 0.90%)</title><rect x="8.3326%" y="181" width="0.9002%" height="15" fill="rgb(210,229,1)" fg:x="305180785" fg:w="32970579"/><text x="8.5826%" y="191.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (32,970,579 samples, 0.90%)</title><rect x="8.3326%" y="165" width="0.9002%" height="15" fill="rgb(222,148,37)" fg:x="305180785" fg:w="32970579"/><text x="8.5826%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (32,970,579 samples, 0.90%)</title><rect x="8.3326%" y="149" width="0.9002%" height="15" fill="rgb(234,67,33)" fg:x="305180785" fg:w="32970579"/><text x="8.5826%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (32,970,579 samples, 0.90%)</title><rect x="8.3326%" y="133" width="0.9002%" height="15" fill="rgb(247,98,35)" fg:x="305180785" fg:w="32970579"/><text x="8.5826%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (32,970,579 samples, 0.90%)</title><rect x="8.3326%" y="117" width="0.9002%" height="15" fill="rgb(247,138,52)" fg:x="305180785" fg:w="32970579"/><text x="8.5826%" y="127.50"></text></g><g><title>rand_chacha::guts::round (29,331,822 samples, 0.80%)</title><rect x="8.4320%" y="101" width="0.8009%" height="15" fill="rgb(213,79,30)" fg:x="308819542" fg:w="29331822"/><text x="8.6820%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (7,459,904 samples, 0.20%)</title><rect x="9.0292%" y="85" width="0.2037%" height="15" fill="rgb(246,177,23)" fg:x="330691460" fg:w="7459904"/><text x="9.2792%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (7,459,904 samples, 0.20%)</title><rect x="9.0292%" y="69" width="0.2037%" height="15" fill="rgb(230,62,27)" fg:x="330691460" fg:w="7459904"/><text x="9.2792%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (7,459,904 samples, 0.20%)</title><rect x="9.0292%" y="53" width="0.2037%" height="15" fill="rgb(216,154,8)" fg:x="330691460" fg:w="7459904"/><text x="9.2792%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (38,320,542 samples, 1.05%)</title><rect x="30.4625%" y="117" width="1.0463%" height="15" fill="rgb(244,35,45)" fg:x="1115684448" fg:w="38320542"/><text x="30.7125%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="293" width="7.5906%" height="15" fill="rgb(251,115,12)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="303.50">alloc::vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="277" width="7.5906%" height="15" fill="rgb(240,54,50)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="287.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="261" width="7.5906%" height="15" fill="rgb(233,84,52)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="271.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="245" width="7.5906%" height="15" fill="rgb(207,117,47)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="255.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="229" width="7.5906%" height="15" fill="rgb(249,43,39)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="239.50">alloc::raw..</text></g><g><title>alloc::raw_vec::finish_grow (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="213" width="7.5906%" height="15" fill="rgb(209,38,44)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="223.50">alloc::raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="197" width="7.5906%" height="15" fill="rgb(236,212,23)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="207.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::grow_impl (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="181" width="7.5906%" height="15" fill="rgb(242,79,21)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="191.50">alloc::all..</text></g><g><title>alloc::alloc::realloc (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="165" width="7.5906%" height="15" fill="rgb(211,96,35)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="175.50">alloc::all..</text></g><g><title>__GI___libc_realloc (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="149" width="7.5906%" height="15" fill="rgb(253,215,40)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="159.50">__GI___lib..</text></g><g><title>_int_realloc (278,005,301 samples, 7.59%)</title><rect x="30.4625%" y="133" width="7.5906%" height="15" fill="rgb(211,81,21)" fg:x="1115684448" fg:w="278005301"/><text x="30.7125%" y="143.50">_int_reall..</text></g><g><title>_int_malloc (239,684,759 samples, 6.54%)</title><rect x="31.5088%" y="117" width="6.5443%" height="15" fill="rgb(208,190,38)" fg:x="1154004990" fg:w="239684759"/><text x="31.7588%" y="127.50">_int_mall..</text></g><g><title>malloc_consolidate (239,684,759 samples, 6.54%)</title><rect x="31.5088%" y="101" width="6.5443%" height="15" fill="rgb(235,213,38)" fg:x="1154004990" fg:w="239684759"/><text x="31.7588%" y="111.50">malloc_co..</text></g><g><title>unlink_chunk.isra.0 (98,536,079 samples, 2.69%)</title><rect x="35.3627%" y="85" width="2.6904%" height="15" fill="rgb(237,122,38)" fg:x="1295153670" fg:w="98536079"/><text x="35.6127%" y="95.50">un..</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::add_empty_triangle (299,594,818 samples, 8.18%)</title><rect x="30.2804%" y="341" width="8.1801%" height="15" fill="rgb(244,218,35)" fg:x="1109012850" fg:w="299594818"/><text x="30.5304%" y="351.50">skeletal_st..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (299,594,818 samples, 8.18%)</title><rect x="30.2804%" y="325" width="8.1801%" height="15" fill="rgb(240,68,47)" fg:x="1109012850" fg:w="299594818"/><text x="30.5304%" y="335.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (292,923,220 samples, 8.00%)</title><rect x="30.4625%" y="309" width="7.9979%" height="15" fill="rgb(210,16,53)" fg:x="1115684448" fg:w="292923220"/><text x="30.7125%" y="319.50">alloc::vec:..</text></g><g><title>core::ptr::write (14,917,919 samples, 0.41%)</title><rect x="38.0532%" y="293" width="0.4073%" height="15" fill="rgb(235,124,12)" fg:x="1393689749" fg:w="14917919"/><text x="38.3032%" y="303.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::halfedge_opposite_index (79,743,912 samples, 2.18%)</title><rect x="38.4605%" y="341" width="2.1773%" height="15" fill="rgb(224,169,11)" fg:x="1408607668" fg:w="79743912"/><text x="38.7105%" y="351.50">s..</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::oppose_halfedges (43,513,737 samples, 1.19%)</title><rect x="40.6378%" y="341" width="1.1881%" height="15" fill="rgb(250,166,2)" fg:x="1488351580" fg:w="43513737"/><text x="40.8878%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (17,814,278 samples, 0.49%)</title><rect x="41.3395%" y="325" width="0.4864%" height="15" fill="rgb(242,216,29)" fg:x="1514051039" fg:w="17814278"/><text x="41.5895%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (17,814,278 samples, 0.49%)</title><rect x="41.3395%" y="309" width="0.4864%" height="15" fill="rgb(230,116,27)" fg:x="1514051039" fg:w="17814278"/><text x="41.5895%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (17,814,278 samples, 0.49%)</title><rect x="41.3395%" y="293" width="0.4864%" height="15" fill="rgb(228,99,48)" fg:x="1514051039" fg:w="17814278"/><text x="41.5895%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10,428,248 samples, 0.28%)</title><rect x="42.0829%" y="325" width="0.2847%" height="15" fill="rgb(253,11,6)" fg:x="1541276753" fg:w="10428248"/><text x="42.3329%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10,428,248 samples, 0.28%)</title><rect x="42.0829%" y="309" width="0.2847%" height="15" fill="rgb(247,143,39)" fg:x="1541276753" fg:w="10428248"/><text x="42.3329%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10,428,248 samples, 0.28%)</title><rect x="42.0829%" y="293" width="0.2847%" height="15" fill="rgb(236,97,10)" fg:x="1541276753" fg:w="10428248"/><text x="42.3329%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,732,947 samples, 0.10%)</title><rect x="43.6556%" y="261" width="0.1019%" height="15" fill="rgb(233,208,19)" fg:x="1598878705" fg:w="3732947"/><text x="43.9056%" y="271.50"></text></g><g><title>[libc-2.31.so] (4,018,982 samples, 0.11%)</title><rect x="46.8717%" y="165" width="0.1097%" height="15" fill="rgb(216,164,2)" fg:x="1716667814" fg:w="4018982"/><text x="47.1217%" y="175.50"></text></g><g><title>_int_free (16,224,481 samples, 0.44%)</title><rect x="46.9815%" y="165" width="0.4430%" height="15" fill="rgb(220,129,5)" fg:x="1720686796" fg:w="16224481"/><text x="47.2315%" y="175.50"></text></g><g><title>__GI___libc_realloc (157,858,083 samples, 4.31%)</title><rect x="44.0422%" y="197" width="4.3101%" height="15" fill="rgb(242,17,10)" fg:x="1613038731" fg:w="157858083"/><text x="44.2922%" y="207.50">__GI_..</text></g><g><title>_int_realloc (103,622,431 samples, 2.83%)</title><rect x="45.5231%" y="181" width="2.8293%" height="15" fill="rgb(242,107,0)" fg:x="1667274383" fg:w="103622431"/><text x="45.7731%" y="191.50">_i..</text></g><g><title>_int_malloc (33,985,537 samples, 0.93%)</title><rect x="47.4244%" y="165" width="0.9279%" height="15" fill="rgb(251,28,31)" fg:x="1736911277" fg:w="33985537"/><text x="47.6744%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (163,421,379 samples, 4.46%)</title><rect x="43.9716%" y="245" width="4.4620%" height="15" fill="rgb(233,223,10)" fg:x="1610451351" fg:w="163421379"/><text x="44.2216%" y="255.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::grow_impl (163,421,379 samples, 4.46%)</title><rect x="43.9716%" y="229" width="4.4620%" height="15" fill="rgb(215,21,27)" fg:x="1610451351" fg:w="163421379"/><text x="44.2216%" y="239.50">alloc..</text></g><g><title>alloc::alloc::realloc (163,421,379 samples, 4.46%)</title><rect x="43.9716%" y="213" width="4.4620%" height="15" fill="rgb(232,23,21)" fg:x="1610451351" fg:w="163421379"/><text x="44.2216%" y="223.50">alloc..</text></g><g><title>__rdl_realloc (2,975,916 samples, 0.08%)</title><rect x="48.3524%" y="197" width="0.0813%" height="15" fill="rgb(244,5,23)" fg:x="1770896814" fg:w="2975916"/><text x="48.6024%" y="207.50"></text></g><g><title>__GI___libc_malloc (36,345,530 samples, 0.99%)</title><rect x="48.4336%" y="245" width="0.9924%" height="15" fill="rgb(226,81,46)" fg:x="1773872730" fg:w="36345530"/><text x="48.6836%" y="255.50"></text></g><g><title>_int_malloc (29,140,527 samples, 0.80%)</title><rect x="48.6304%" y="229" width="0.7956%" height="15" fill="rgb(247,70,30)" fg:x="1781077733" fg:w="29140527"/><text x="48.8804%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (210,267,258 samples, 5.74%)</title><rect x="43.7575%" y="261" width="5.7411%" height="15" fill="rgb(212,68,19)" fg:x="1602611652" fg:w="210267258"/><text x="44.0075%" y="271.50">alloc::..</text></g><g><title>__rust_alloc (2,660,650 samples, 0.07%)</title><rect x="49.4260%" y="245" width="0.0726%" height="15" fill="rgb(240,187,13)" fg:x="1810218260" fg:w="2660650"/><text x="49.6760%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (218,062,368 samples, 5.95%)</title><rect x="43.6556%" y="309" width="5.9540%" height="15" fill="rgb(223,113,26)" fg:x="1598878705" fg:w="218062368"/><text x="43.9056%" y="319.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (218,062,368 samples, 5.95%)</title><rect x="43.6556%" y="293" width="5.9540%" height="15" fill="rgb(206,192,2)" fg:x="1598878705" fg:w="218062368"/><text x="43.9056%" y="303.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (218,062,368 samples, 5.95%)</title><rect x="43.6556%" y="277" width="5.9540%" height="15" fill="rgb(241,108,4)" fg:x="1598878705" fg:w="218062368"/><text x="43.9056%" y="287.50">alloc::r..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4,062,163 samples, 0.11%)</title><rect x="49.4987%" y="261" width="0.1109%" height="15" fill="rgb(247,173,49)" fg:x="1812878910" fg:w="4062163"/><text x="49.7487%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (279,313,031 samples, 7.63%)</title><rect x="42.3676%" y="325" width="7.6263%" height="15" fill="rgb(224,114,35)" fg:x="1551705001" fg:w="279313031"/><text x="42.6176%" y="335.50">alloc::vec..</text></g><g><title>core::ptr::write (14,076,959 samples, 0.38%)</title><rect x="49.6096%" y="309" width="0.3844%" height="15" fill="rgb(245,159,27)" fg:x="1816941073" fg:w="14076959"/><text x="49.8596%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (965,339 samples, 0.03%)</title><rect x="50.1029%" y="293" width="0.0264%" height="15" fill="rgb(245,172,44)" fg:x="1835009183" fg:w="965339"/><text x="50.3529%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (965,339 samples, 0.03%)</title><rect x="50.1029%" y="277" width="0.0264%" height="15" fill="rgb(236,23,11)" fg:x="1835009183" fg:w="965339"/><text x="50.3529%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (965,339 samples, 0.03%)</title><rect x="50.1029%" y="261" width="0.0264%" height="15" fill="rgb(205,117,38)" fg:x="1835009183" fg:w="965339"/><text x="50.3529%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (965,339 samples, 0.03%)</title><rect x="50.1029%" y="245" width="0.0264%" height="15" fill="rgb(237,72,25)" fg:x="1835009183" fg:w="965339"/><text x="50.3529%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (965,339 samples, 0.03%)</title><rect x="50.1029%" y="229" width="0.0264%" height="15" fill="rgb(244,70,9)" fg:x="1835009183" fg:w="965339"/><text x="50.3529%" y="239.50"></text></g><g><title>core::cmp::max (965,339 samples, 0.03%)</title><rect x="50.1029%" y="213" width="0.0264%" height="15" fill="rgb(217,125,39)" fg:x="1835009183" fg:w="965339"/><text x="50.3529%" y="223.50"></text></g><g><title>core::cmp::Ord::max (965,339 samples, 0.03%)</title><rect x="50.1029%" y="197" width="0.0264%" height="15" fill="rgb(235,36,10)" fg:x="1835009183" fg:w="965339"/><text x="50.3529%" y="207.50"></text></g><g><title>core::cmp::max_by (965,339 samples, 0.03%)</title><rect x="50.1029%" y="181" width="0.0264%" height="15" fill="rgb(251,123,47)" fg:x="1835009183" fg:w="965339"/><text x="50.3529%" y="191.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::set_triangle (306,684,608 samples, 8.37%)</title><rect x="41.8259%" y="341" width="8.3737%" height="15" fill="rgb(221,13,13)" fg:x="1531865317" fg:w="306684608"/><text x="42.0759%" y="351.50">skeletal_str..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (7,531,893 samples, 0.21%)</title><rect x="49.9939%" y="325" width="0.2057%" height="15" fill="rgb(238,131,9)" fg:x="1831018032" fg:w="7531893"/><text x="50.2439%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3,540,742 samples, 0.10%)</title><rect x="50.1029%" y="309" width="0.0967%" height="15" fill="rgb(211,50,8)" fg:x="1835009183" fg:w="3540742"/><text x="50.3529%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,575,403 samples, 0.07%)</title><rect x="50.1293%" y="293" width="0.0703%" height="15" fill="rgb(245,182,24)" fg:x="1835974522" fg:w="2575403"/><text x="50.3793%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,575,403 samples, 0.07%)</title><rect x="50.1293%" y="277" width="0.0703%" height="15" fill="rgb(242,14,37)" fg:x="1835974522" fg:w="2575403"/><text x="50.3793%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,303,918 samples, 0.09%)</title><rect x="50.1996%" y="309" width="0.0902%" height="15" fill="rgb(246,228,12)" fg:x="1838549925" fg:w="3303918"/><text x="50.4496%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,303,918 samples, 0.09%)</title><rect x="50.1996%" y="293" width="0.0902%" height="15" fill="rgb(213,55,15)" fg:x="1838549925" fg:w="3303918"/><text x="50.4496%" y="303.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::triangle_node_values (6,952,194 samples, 0.19%)</title><rect x="50.1996%" y="341" width="0.1898%" height="15" fill="rgb(209,9,3)" fg:x="1838549925" fg:w="6952194"/><text x="50.4496%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6,952,194 samples, 0.19%)</title><rect x="50.1996%" y="325" width="0.1898%" height="15" fill="rgb(230,59,30)" fg:x="1838549925" fg:w="6952194"/><text x="50.4496%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,648,276 samples, 0.10%)</title><rect x="50.2898%" y="309" width="0.0996%" height="15" fill="rgb(209,121,21)" fg:x="1841853843" fg:w="3648276"/><text x="50.5398%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,648,276 samples, 0.10%)</title><rect x="50.2898%" y="293" width="0.0996%" height="15" fill="rgb(220,109,13)" fg:x="1841853843" fg:w="3648276"/><text x="50.5398%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (299,324,981 samples, 8.17%)</title><rect x="51.6350%" y="293" width="8.1727%" height="15" fill="rgb(232,18,1)" fg:x="1891122151" fg:w="299324981"/><text x="51.8850%" y="303.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (672,351,063 samples, 18.36%)</title><rect x="68.4798%" y="277" width="18.3578%" height="15" fill="rgb(215,41,42)" fg:x="2508058198" fg:w="672351063"/><text x="68.7298%" y="287.50">alloc::vec::Vec&lt;T,A&gt;::retain:..</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::unset_triangle::{{closure}} (672,351,063 samples, 18.36%)</title><rect x="68.4798%" y="261" width="18.3578%" height="15" fill="rgb(224,123,36)" fg:x="2508058198" fg:w="672351063"/><text x="68.7298%" y="271.50">skeletal_structures::graph_st..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (1,037,062,110 samples, 28.32%)</title><rect x="59.8077%" y="293" width="28.3158%" height="15" fill="rgb(240,125,3)" fg:x="2190447132" fg:w="1037062110"/><text x="60.0577%" y="303.50">alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop</text></g><g><title>core::intrinsics::copy_nonoverlapping (47,099,981 samples, 1.29%)</title><rect x="86.8376%" y="277" width="1.2860%" height="15" fill="rgb(205,98,50)" fg:x="3180409261" fg:w="47099981"/><text x="87.0876%" y="287.50"></text></g><g><title>computation_time_2::generate_random_simplicial_2 (2,982,394,684 samples, 81.43%)</title><rect x="7.2920%" y="373" width="81.4310%" height="15" fill="rgb(205,185,37)" fg:x="267067936" fg:w="2982394684"/><text x="7.5420%" y="383.50">computation_time_2::generate_random_simplicial_2</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::insert_node_within_triangle (2,911,311,256 samples, 79.49%)</title><rect x="9.2328%" y="357" width="79.4901%" height="15" fill="rgb(238,207,15)" fg:x="338151364" fg:w="2911311256"/><text x="9.4828%" y="367.50">skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::insert_node_within_triangle</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::unset_triangle (1,403,960,501 samples, 38.33%)</title><rect x="50.3894%" y="341" width="38.3336%" height="15" fill="rgb(213,199,42)" fg:x="1845502119" fg:w="1403960501"/><text x="50.6394%" y="351.50">skeletal_structures::graph_structure::simplicial2::structure::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1,392,356,659 samples, 38.02%)</title><rect x="50.7062%" y="325" width="38.0168%" height="15" fill="rgb(235,201,11)" fg:x="1857105961" fg:w="1392356659"/><text x="50.9562%" y="335.50">alloc::vec::Vec&lt;T,A&gt;::retain</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (1,392,356,659 samples, 38.02%)</title><rect x="50.7062%" y="309" width="38.0168%" height="15" fill="rgb(207,46,11)" fg:x="1857105961" fg:w="1392356659"/><text x="50.9562%" y="319.50">alloc::vec::Vec&lt;T,A&gt;::retain_mut</text></g><g><title>core::mem::drop (21,953,378 samples, 0.60%)</title><rect x="88.1236%" y="293" width="0.5994%" height="15" fill="rgb(241,35,35)" fg:x="3227509242" fg:w="21953378"/><text x="88.3736%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;usize,alloc::alloc::Global&gt;&gt; (21,953,378 samples, 0.60%)</title><rect x="88.1236%" y="277" width="0.5994%" height="15" fill="rgb(243,32,47)" fg:x="3227509242" fg:w="21953378"/><text x="88.3736%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21,953,378 samples, 0.60%)</title><rect x="88.1236%" y="261" width="0.5994%" height="15" fill="rgb(247,202,23)" fg:x="3227509242" fg:w="21953378"/><text x="88.3736%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (11,411,628 samples, 0.31%)</title><rect x="88.4114%" y="245" width="0.3116%" height="15" fill="rgb(219,102,11)" fg:x="3238050992" fg:w="11411628"/><text x="88.6614%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (19,184,749 samples, 0.52%)</title><rect x="90.9003%" y="357" width="0.5238%" height="15" fill="rgb(243,110,44)" fg:x="3329205385" fg:w="19184749"/><text x="91.1503%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (19,184,749 samples, 0.52%)</title><rect x="90.9003%" y="341" width="0.5238%" height="15" fill="rgb(222,74,54)" fg:x="3329205385" fg:w="19184749"/><text x="91.1503%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (19,184,749 samples, 0.52%)</title><rect x="90.9003%" y="325" width="0.5238%" height="15" fill="rgb(216,99,12)" fg:x="3329205385" fg:w="19184749"/><text x="91.1503%" y="335.50"></text></g><g><title>__GI___libc_free (63,608,309 samples, 1.74%)</title><rect x="91.4241%" y="181" width="1.7368%" height="15" fill="rgb(226,22,26)" fg:x="3348390134" fg:w="63608309"/><text x="91.6741%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2&gt; (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="357" width="4.5634%" height="15" fill="rgb(217,163,10)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="367.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt;&gt; (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="341" width="4.5634%" height="15" fill="rgb(213,25,53)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="351.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="325" width="4.5634%" height="15" fill="rgb(252,105,26)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="335.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="309" width="4.5634%" height="15" fill="rgb(220,39,43)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="319.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt;]&gt; (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="293" width="4.5634%" height="15" fill="rgb(229,68,48)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="303.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="277" width="4.5634%" height="15" fill="rgb(252,8,32)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="287.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="261" width="4.5634%" height="15" fill="rgb(223,20,43)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="271.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="245" width="4.5634%" height="15" fill="rgb(229,81,49)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="255.50">&lt;allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="229" width="4.5634%" height="15" fill="rgb(236,28,36)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="239.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="213" width="4.5634%" height="15" fill="rgb(249,185,26)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="223.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (167,135,038 samples, 4.56%)</title><rect x="91.4241%" y="197" width="4.5634%" height="15" fill="rgb(249,174,33)" fg:x="3348390134" fg:w="167135038"/><text x="91.6741%" y="207.50">alloc..</text></g><g><title>_int_free (103,526,729 samples, 2.83%)</title><rect x="93.1608%" y="181" width="2.8267%" height="15" fill="rgb(233,201,37)" fg:x="3411998443" fg:w="103526729"/><text x="93.4108%" y="191.50">_i..</text></g><g><title>unlink_chunk.isra.0 (14,716,959 samples, 0.40%)</title><rect x="95.5857%" y="165" width="0.4018%" height="15" fill="rgb(221,78,26)" fg:x="3500808213" fg:w="14716959"/><text x="95.8357%" y="175.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::iter_halfedge_2::IterHalfEdge2::opposite (102,087,156 samples, 2.79%)</title><rect x="95.9875%" y="357" width="2.7874%" height="15" fill="rgb(250,127,30)" fg:x="3515525172" fg:w="102087156"/><text x="96.2375%" y="367.50">sk..</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::halfedge_opposite_index (81,442,319 samples, 2.22%)</title><rect x="96.5512%" y="341" width="2.2237%" height="15" fill="rgb(230,49,44)" fg:x="3536170009" fg:w="81442319"/><text x="96.8012%" y="351.50">s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (24,014,457 samples, 0.66%)</title><rect x="98.1192%" y="325" width="0.6557%" height="15" fill="rgb(229,67,23)" fg:x="3593597871" fg:w="24014457"/><text x="98.3692%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (24,014,457 samples, 0.66%)</title><rect x="98.1192%" y="309" width="0.6557%" height="15" fill="rgb(249,83,47)" fg:x="3593597871" fg:w="24014457"/><text x="98.3692%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (24,014,457 samples, 0.66%)</title><rect x="98.1192%" y="293" width="0.6557%" height="15" fill="rgb(215,43,3)" fg:x="3593597871" fg:w="24014457"/><text x="98.3692%" y="303.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::find_node (11,757,353 samples, 0.32%)</title><rect x="98.7749%" y="357" width="0.3210%" height="15" fill="rgb(238,154,13)" fg:x="3617612328" fg:w="11757353"/><text x="99.0249%" y="367.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::find_node_index (11,757,353 samples, 0.32%)</title><rect x="98.7749%" y="341" width="0.3210%" height="15" fill="rgb(219,56,2)" fg:x="3617612328" fg:w="11757353"/><text x="99.0249%" y="351.50"></text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::get_halfedge_from_index (23,321,099 samples, 0.64%)</title><rect x="99.0959%" y="357" width="0.6368%" height="15" fill="rgb(233,0,4)" fg:x="3629369681" fg:w="23321099"/><text x="99.3459%" y="367.50"></text></g><g><title>__libc_start_main (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="613" width="92.6927%" height="15" fill="rgb(235,30,7)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="623.50">__libc_start_main</text></g><g><title>main (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="597" width="92.6927%" height="15" fill="rgb(250,79,13)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="581" width="92.6927%" height="15" fill="rgb(211,146,34)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="565" width="92.6927%" height="15" fill="rgb(228,22,38)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="549" width="92.6927%" height="15" fill="rgb(235,168,5)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="533" width="92.6927%" height="15" fill="rgb(221,155,16)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="517" width="92.6927%" height="15" fill="rgb(215,215,53)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="501" width="92.6927%" height="15" fill="rgb(223,4,10)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="485" width="92.6927%" height="15" fill="rgb(234,103,6)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="469" width="92.6927%" height="15" fill="rgb(227,97,0)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="453" width="92.6927%" height="15" fill="rgb(234,150,53)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="437" width="92.6927%" height="15" fill="rgb(228,201,54)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="421" width="92.6927%" height="15" fill="rgb(222,22,37)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="405" width="92.6927%" height="15" fill="rgb(237,53,32)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>computation_time_2::main (3,394,850,915 samples, 92.69%)</title><rect x="7.2920%" y="389" width="92.6927%" height="15" fill="rgb(233,25,53)" fg:x="267067936" fg:w="3394850915"/><text x="7.5420%" y="399.50">computation_time_2::main</text></g><g><title>computation_time_2::test (412,456,231 samples, 11.26%)</title><rect x="88.7230%" y="373" width="11.2617%" height="15" fill="rgb(210,40,34)" fg:x="3249462620" fg:w="412456231"/><text x="88.9730%" y="383.50">computation_time_..</text></g><g><title>skeletal_structures::graph_structure::simplicial2::structure::simplicial_2::Simplicial2::halfedge_opposite_index (9,228,071 samples, 0.25%)</title><rect x="99.7327%" y="357" width="0.2520%" height="15" fill="rgb(241,220,44)" fg:x="3652690780" fg:w="9228071"/><text x="99.9827%" y="367.50"></text></g><g><title>all (3,662,481,171 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="3662481171"/><text x="0.2500%" y="671.50"></text></g><g><title>computation_tim (3,662,481,171 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="3662481171"/><text x="0.2500%" y="655.50">computation_tim</text></g><g><title>_start (3,395,413,465 samples, 92.71%)</title><rect x="7.2920%" y="629" width="92.7080%" height="15" fill="rgb(224,130,29)" fg:x="267067706" fg:w="3395413465"/><text x="7.5420%" y="639.50">_start</text></g><g><title>_dl_start (562,320 samples, 0.02%)</title><rect x="99.9846%" y="613" width="0.0154%" height="15" fill="rgb(235,212,8)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="623.50"></text></g><g><title>_dl_sysdep_start (562,320 samples, 0.02%)</title><rect x="99.9846%" y="597" width="0.0154%" height="15" fill="rgb(223,33,50)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="607.50"></text></g><g><title>dl_main (562,320 samples, 0.02%)</title><rect x="99.9846%" y="581" width="0.0154%" height="15" fill="rgb(219,149,13)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="591.50"></text></g><g><title>_dl_map_object_deps (562,320 samples, 0.02%)</title><rect x="99.9846%" y="565" width="0.0154%" height="15" fill="rgb(250,156,29)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="575.50"></text></g><g><title>_dl_catch_exception (562,320 samples, 0.02%)</title><rect x="99.9846%" y="549" width="0.0154%" height="15" fill="rgb(216,193,19)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="559.50"></text></g><g><title>openaux (562,320 samples, 0.02%)</title><rect x="99.9846%" y="533" width="0.0154%" height="15" fill="rgb(216,135,14)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="543.50"></text></g><g><title>_dl_map_object (562,320 samples, 0.02%)</title><rect x="99.9846%" y="517" width="0.0154%" height="15" fill="rgb(241,47,5)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="527.50"></text></g><g><title>_dl_load_cache_lookup (562,320 samples, 0.02%)</title><rect x="99.9846%" y="501" width="0.0154%" height="15" fill="rgb(233,42,35)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="511.50"></text></g><g><title>_dl_cache_libcmp (562,320 samples, 0.02%)</title><rect x="99.9846%" y="485" width="0.0154%" height="15" fill="rgb(231,13,6)" fg:x="3661918851" fg:w="562320"/><text x="100.2346%" y="495.50"></text></g></svg></svg>